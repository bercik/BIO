#INCLUDE("<stdlib/test.biom>")

def test_to_string()
   bt_assert_eq(TO_STR(true), "true")
   bt_assert_eq(TO_STR(10.5), "10.5")
   bt_assert_eq(TO_STR(none), "none")
   bt_assert_eq(TO_STR(-5), "-5")
   bt_assert_eq(TO_STR("asd"), "asd")
   bt_assert_eq(TO_STR(CR_TUP(1, "asd", true)), "( 1, \"asd\", true )")

   AS_LOC(a.x, 10, a.y, 20, a.z.k, "Bob", a.z.l, "Onion")
   bt_assert_eq(TO_STR(a), "<x: 10, y: 20, z: <k: \"Bob\", l: \"Onion\">>")
   bt_assert_eq(TO_STR(CREATE_DICT("a", 1, "b", "tekst", "c", a)), 
      "{ a: 1, b: \"tekst\", c: <x: 10, y: 20, z: <k: \"Bob\", l: \"Onion\">> }")
end

def test_to_int()
   bt_assert_eq(TO_INT(true), 1)
   bt_assert_eq(TO_INT(false), 0)
   bt_assert_eq(TO_INT(10), 10)
   bt_assert_eq(TO_INT(10.6), 11)
   bt_assert_eq(TO_INT(10.5), 11)
   bt_assert_eq(TO_INT(10.4), 10)
   bt_assert_eq(TO_INT("10"), 10)
   bt_assert_error(TO_INT("asd"))
end

def test_to_float()
   bt_assert_eq(TO_FLOAT(true), 1.0)
   bt_assert_eq(TO_FLOAT(false), 0.0)
   bt_assert_eq(TO_FLOAT(10), 10.0)
   bt_assert_eq(TO_FLOAT(10.6), 10.6)
   bt_assert_eq(TO_FLOAT("10"), 10.0)
   bt_assert_eq(TO_FLOAT("10.6"), 10.6)
   bt_assert_error(TO_FLOAT("asd"))
end

def test_to_bool()
   bt_assert_true(TO_BOOL(2))
   bt_assert_false(TO_BOOL(0))
   bt_assert_true(TO_BOOL(2.0))
   bt_assert_false(TO_BOOL(0.0))
   bt_assert_false(TO_BOOL(false))
   bt_assert_false(TO_BOOL("false"))
   bt_assert_true(TO_BOOL("true"))
   bt_assert_error(TO_BOOL("asd"))
end

def test_to_array()
   ASSIGN_LOCAL(tup, CREATE_TUPLE(1, 2, 3, 4))
   ASSIGN_LOCAL(arr, TO_ARRAY(tup))
   SET(arr, 0, "el")
   bt_assert_eq(tup, CR_TUP(1, 2, 3, 4))
   bt_assert_eq(arr, CR_TUP("el", 2, 3, 4))
end

def test_to_tuple()
   ASSIGN_LOCAL(arr, CREATE_ARRAY(4))
   SET(arr, 0, 1)
   SET(arr, 1, 2)
   SET(arr, 2, 3)
   SET(arr, 3, 4)
   ASSIGN_LOCAL(tup, TO_TUPLE(arr))
   SET(arr, 0, "el")
   bt_assert_eq(tup, CR_TUP(1, 2, 3, 4))
   bt_assert_eq(arr, CR_TUP("el", 2, 3, 4))
end

