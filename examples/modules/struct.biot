#INCLUDE("<stdlib/biotest.biom>")

def test_creation()
   AS_LOC(a.b, 10)
   BT_ASSERT_TRUE(IS_LOCAL(a))
   BT_ASSERT_TRUE(IS_LOCAL(a.b))
   BT_ASSERT_FALSE(IS_LOCAL(a.c))

   AS_LOC(a.b.c, "a.b.c")
   BT_ASSERT_TRUE(IS_LOCAL(a))
   BT_ASSERT_TRUE(IS_LOCAL(a.b))
   BT_ASSERT_TRUE(IS_LOCAL(a.b.c))
   BT_ASSERT_FALSE(IS_LOCAL(a.b.c.d))
   BT_ASSERT_FALSE(IS_LOCAL(a.c))

   AS_LOC(a, 20)
   BT_ASSERT_TRUE(IS_LOCAL(a))
   BT_ASSERT_FALSE(IS_LOCAL(a.b))

   AS_LOC(a.b.c, "a.b.c")
   AS_LOC(a.b.cc, "a.b.cc")
   BT_ASSERT_TRUE(IS_LOCAL(a))
   BT_ASSERT_TRUE(IS_LOCAL(a.b))
   BT_ASSERT_TRUE(IS_LOCAL(a.b.c))
   BT_ASSERT_TRUE(IS_LOCAL(a.b.cc))
   BT_ASSERT_FALSE(IS_LOCAL(a.c))

   BT_ASSERT_EQ(a.b.c, "a.b.c")
   BT_ASSERT_EQ(a.b.cc, "a.b.cc")
end

def test_has_field()
   AS_LOC(a.b.c, 10)
   AS_LOC(a.b.d, "test")

   BT_ASSERT_TRUE(HAS_FIELD(a, b))
   BT_ASSERT_TRUE(HAS_FIELD(a, b.c))
   BT_ASSERT_TRUE(HAS_FIELD(a, b.d))
   BT_ASSERT_TRUE(HAS_FIELD(a.b, c))

   BT_ASSERT_FALSE(HAS_FIELD(a, c))
   BT_ASSERT_FALSE(HAS_FIELD(a, b.c.d))

   BT_ASSERT_ERROR(HAS_FIELD(x, a.b.c.d.e))
end

def test_create_struct()
   AS_LOC(struct, CR_STRUCT())
   BT_ASSERT_TRUE(IS_STRUCT(struct))
   AS_LOC(struct.x, 10)
   AS_LOC(struct.y, 20)
   AS_LOC(struct.x.a, "text")
   AS_LOC(struct2, CR_STRUCT(x, 10, y, 20, x.a, "text"))
   BT_ASSERT_EQ(struct, struct2)
end
