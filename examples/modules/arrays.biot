#INCLUDE("../stdlib/biotest.biom")

def test_tuple()
   % tworzymy tuplę
   ASSIGN_LOCAL(tup, CREATE_TUPLE(1, 5.3, -1.4))
   % spodziewana tupla
   ASSIGN_LOCAL(expected_tup, CREATE_TUPLE(-1, -5.3, 1.4))
   % negujemy wszystkie liczby
   ASSIGN_LOCAL(tup, MUL(tup, CREATE_TUPLE_OF_ELEMENTS(SIZE(tup), -1)))
   % sprawdzamy
   BT_ASSERT_EQ(tup, expected_tup, "")
end

def test_range()
   BT_ASSERT_EQ(RANGE(1, 5), CREATE_TUPLE(1, 2, 3, 4, 5), "")
   BT_ASSERT_TRUE(IS_ERROR(RANGE(1.0, 10)), "") % error
   BT_ASSERT_TRUE(IS_ERROR(RANGE(10, 1)), "") % error
end

def test_array()
   % tworzymy tablicę
   ASSIGN_LOCAL(arr, CREATE_ARRAY(2))
   BT_ASSERT_EQ(arr, CREATE_TUPLE(none, none), "")
   BT_ASSERT_TRUE(IS_ERROR(CREATE_ARRAY(-2)), "") % error
end

def test_dict()
   BT_ASSERT_TRUE(IS_ERROR(CREATE_DICT(true, "asd")), "") % error
end

def test_set()
   AS_LOC(arr, CREATE_ARRAY(2))
   AS_LOC(dict, CREATE_DICT("el1", 10, "el2", none))
   BT_ASSERT_TRUE(IS_ERROR(SET(arr, 10, "siema")), "") % error
   BT_ASSERT_TRUE(IS_ERROR(SET(dict, 10, "siema")), "") % error
   SET(dict, "el1", arr)
   SET(arr, 0, "siema")
   BT_ASSERT_EQ(arr, CREATE_TUPLE("siema", none), "")
   BT_ASSERT_EQ(GET(dict, "el1"), CREATE_TUPLE("siema", none), "")
end

def test_get()
   AS_LOC(tup, CREATE_TUPLE("siema", none))
   AS_LOC(dict, CREATE_DICT("el1", 10, "el2", none))
   BT_ASSERT_ERROR(GET(tup, 10), "") % error
   BT_ASSERT_ERROR(GET(dict, "el3"), "") % error
   BT_ASSERT_EQ(GET(tup, 0), "siema", "")
   BT_ASSERT_EQ(GET(dict, "el1"), 10, "")
end

def test_size()
   BT_ASSERT_EQ(SIZE(CREATE_ARRAY(3)), 3, "")
end

def test_copy()
   AS_LOC(arr, TO_ARR(CR_TUP("siema", none)))
   ASSIGN_LOCAL(arr2, arr)
   SET(arr2, 1, 10)
   BT_ASSERT_EQ(arr, CREATE_TUPLE("siema", 10), "")
   BT_ASSERT_EQ(arr2, CREATE_TUPLE("siema", 10), "")
   ASSIGN_LOCAL(arr2, COPY(arr))
   SET(arr2, 1, 20)
   BT_ASSERT_EQ(arr, CREATE_TUPLE("siema", 10), "")
   BT_ASSERT_EQ(arr2, CREATE_TUPLE("siema", 20), "")
   AS_LOC(dict, CREATE_DICT("el1", arr, "el2", true))
   ASSIGN_LOCAL(dict2, COPY(dict))
   SET(dict2, "el1", -2.5)
   BT_ASSERT_EQ(dict, CREATE_DICT("el1", arr, "el2", true), "")
   BT_ASSERT_EQ(dict2, CREATE_DICT("el1", -2.5, "el2", true), "")
end

def test_deep_copy()
   AS_LOC(arr, TO_ARR(CR_TUP("siema", none)))
   AS_LOC(dict, CREATE_DICT("el1", arr, "el2", true))
   ASSIGN_LOCAL(dict3, DEEP_COPY(dict))
   SET(GET(dict3, "el1"), 1, true)
   BT_ASSERT_EQ(dict, CREATE_DICT("el1", CREATE_TUPLE("siema", none), "el2", true), "")
   BT_ASSERT_EQ(dict3, CREATE_DICT("el1", CREATE_TUPLE("siema", true), "el2", true), "")
end

def test_extend_array()
   ASSIGN_LOCAL(arr, CREATE_ARRAY(2))
   SET(arr, 0, 10)
   SET(arr, 1, 20)
   ASSIGN_LOCAL(arr, EXTEND_ARRAY(arr, 4))
   SET(arr, 2, 30)
   BT_ASSERT_EQ(arr, CREATE_TUPLE(10, 20, 30, none), "")
   ASSIGN_LOCAL(arr, EXTEND_ARRAY(arr, 1))
   BT_ASSERT_EQ(arr, CREATE_TUPLE(10), "")
end

def test_unpack()
   UNPACK(x, y, z, RANGE(1, 5))
   BT_ASSERT_EQ(x, 1, "")
   BT_ASSERT_EQ(y, 2, "")
   BT_ASSERT_EQ(z, CREATE_TUPLE(3, 4, 5), "")
   UNPACK(x, y, z, RANGE(1, 3))
   BT_ASSERT_EQ(x, 1, "")
   BT_ASSERT_EQ(y, 2, "")
   BT_ASSERT_EQ(z, 3, "")
   BT_ASSERT_ERROR(UNPACK(x, y, z, k, RANGE(1, 3)), "") % error
end

def test_contains()
   AS_LOC(arr, TO_ARR(CR_TUP(10, 15, "abc")))
   BT_ASSERT_TRUE(CONTAINS(arr, 10), "")
   BT_ASSERT_FALSE(CONTAINS(arr, "siema"), "")
end

def test_contains_key()
   AS_LOC(dict, CREATE_DICT("el1", none, "el2", true))
   BT_ASSERT_TRUE(CONTAINS_KEY(dict, "el1"), "") % true
   BT_ASSERT_FALSE(CONTAINS_KEY(dict, "el4"), "") % false
end

def test_contains_value()
   AS_LOC(dict, CREATE_DICT("el1", none, "el2", true))
   BT_ASSERT_TRUE(CONTAINS_VALUE(dict, true), "")
   BT_ASSERT_FALSE(CONTAINS_VALUE(dict, "cos"), "")
end

def test_count_elements()
   ASSIGN_LOCAL(tup, CREATE_TUPLE(10, true, none, 10, -10, "10"))
   BT_ASSERT_EQ(COUNT_ELEMENTS(tup, 10), 2, "")
   ASSIGN_LOCAL(dict, CREATE_DICT("el1", 10, "el2", true, "el3", none, "el4", "siema", "el5", 10, "el6", "10"))
   BT_ASSERT_EQ(COUNT_ELEMENTS(dict, 10), 2, "")
end

def test_sort()
   BT_ASSERT_EQ(SORT_ASC(CREATE_TUPLE(1, 0.5, 1.5, 2.5, -2.0, 3.5)), 
      CREATE_TUPLE(-2.0, 0.5, 1, 1.5, 2.5, 3.5), "")
   BT_ASSERT_EQ(SORT_ASC(CREATE_TUPLE("b", "a", "ab", "ba", "c", "xyz", "adsd")), 
      CREATE_TUPLE("a", "ab", "adsd", "b", "ba", "c", "xyz"), "")
   BT_ASSERT_ERROR(SORT_ASC(CREATE_TUPLE("b", 1)), "")
   BT_ASSERT_ERROR(SORT_ASC(CREATE_TUPLE(true, 1)), "")

   BT_ASSERT_EQ(SORT_DESC(CREATE_TUPLE(1, 0.5, 1.5, 2.5, -2.0, 3.5)),
      CREATE_TUPLE(3.5, 2.5, 1.5, 1, 0.5, -2.0), "")
   BT_ASSERT_EQ(SORT_DESC(CREATE_TUPLE("b", "a", "ab", "ba", "c", "xyz", "adsd")),
      CREATE_TUPLE("xyz", "c", "ba", "b", "adsd", "ab", "a"), "")
end

def test_get_keys()
   AS_LOC(dict, CREATE_DICT("el1", none, "el2", true))
   BT_ASSERT_EQ(GET_KEYS(dict), CREATE_TUPLE("el2", "el1"), "")
end

def test_remove_key()
   AS_LOC(dict, CREATE_DICT("el1", none, "el2", true))
   REMOVE_KEY(dict, "el1")
   BT_ASSERT_EQ(GET_KEYS(dict), CREATE_TUPLE("el2"), "")
   BT_ASSERT_ERROR(REMOVE_KEY(dict, "el1"), "") % error
end

def test_slice()
   ASSIGN_LOCAL(arr, RANGE(1, 4))
   BT_ASSERT_EQ(SLICE(arr, 0, SIZE(arr)), CREATE_TUPLE(1, 2, 3, 4), "")
   BT_ASSERT_EQ(SLICE(arr, 1, 2), CREATE_TUPLE(2), "")
   BT_ASSERT_EQ(SLICE(arr, 1, 3), CREATE_TUPLE(2, 3), "")
   BT_ASSERT_ERROR(SLICE(arr, 0, 5), "") % error
end
