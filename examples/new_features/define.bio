@ prosta podmiana
#DEFINE(SIZE_DEF, 10)
#DEFINE(GG, GET_GLOB)

@ podmiana na funkcję
#DEFINE(indent, PRINT("    "))

@ podmiana na funkcję z parametrem innym define
#DEFINE(TWICE_SIZE, MUL(SIZE_DEF, 2))

@ podmiana na funkcję z dwoma parametrami define i parserem mat-log
#DEFINE(cr_new_arr, CR_ARR({ TWICE_SIZE + SIZE_DEF }))

@ illegal bad math-log expression
@ #DEFINE(cr_new_arr2, CR_ARR({ TWICE_SIZE ; SIZE_DEF }))

@ illegal bad token
@ #DEFINE(some_bad_define, %)

@ legal
#DEFINE(trash, ,,,,)

@ illegal (parenthesis don't match)
#DEFINE(HASNT_FIELD, NOT(HAS_FIELD)

@ illegal (id same as builtin function name)
@ #DEFINE(AS_LOC, AS_GLOB)

@ illegal (define with this id already exists)
@ #DEFINE(SIZE, 20)

@ illegal (odwołanie do samego siebie, nieskończenie rekurencyjne definy)
#DEFINE(define, define)
#DEFINE(def1, def2)
#DEFINE(def2, def1)

def onSTART()
   AS_GLOB(a, 10)
   PRINTLN(GG(a))

   indent
   PRINT("wcięty tekst\n")

   PRINTLN({ TWICE_SIZE + SIZE_DEF })

   AS_LOC(arr, cr_new_arr)
   PRINTLN(SIZE(arr))

   AS_LOC(vec.x, SIZE_DEF, vec.y, TWICE_SIZE)
   IF(HASNT_FIELD(vec, a), PRINTLN("struct vec hasn't got field a"))
end
