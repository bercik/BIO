@ create_list(capacity=10)
@ append_to_list(list, item)
@ insert_into_list(list, index, item)
@ remove_from_list(list, index)
@ index_of_item_list(list, item)
@ get_item_from_list(list, index)
@ get_array_list(list)
@ print_list(list)


@ creates list with given capacity
@ returns error if capacity is less than zero
def create_list(capacity=10)
   IF({ capacity < 0 }, RET(CR_ERR("Capacity less than zero!", none, none)))
   AS_LOC(list.count, 0, list.arr, CR_ARR(capacity))
   RET(list)
end

@ append item to list, extend it if needed
def append_to_list(list, item)
   _extend_list_if_needed(list)
   SET(list.arr, list.count, item)
   INC(list.count)
end

@ inserts item into list at index, extend it if needed
@ If index is less than zero or greater than count returns error
def insert_into_list(list, index, item)
   _extend_list_if_needed(list)
   @ sprawdzamy czy index zawiera się w granicach
   IF
   (
      { index < 0 || index > list.count },
      RET(CR_ERR("Index out of bounds", none, none))
   )
   @ pętla od count-1 do -1 co -1
   FOR
   (
      AS_LOC(i, { list.count - 1 }),
      { i >= -1 },
      @ jeżeli i == index-1 to wstaw w miejsce o jeden w prawo item i zatrzymaj
      @ inaczej przenieś element z arr[i] do arr[i+1]
      IF
      (
         { i == index - 1 },
         CALL
         (
            SET(list.arr, ADD(i, 1), item),
            BREAK()
         ),
         SET(list.arr, ADD(i, 1), GET(list.arr, i))
      ),
      DEC(i)
   )
   INC(list.count)
end

@ Remove item at index from list. Returns none
@ If index is less than zero or greater or equals than count returns error
def remove_from_list(list, index)
   @ sprawdzamy czy index zawiera się w granicach
   IF
   (
      { index < 0 || index > list.count },
      RET(CR_ERR("Index out of bounds", none, none))
   )
   @ iterujemy od index do count-2 co +1
   @ przesuwając element z arr[i+1] do arr[i]
   FOR
   (
      AS_LOC(i, index),
      { i < list.count - 1 },
      SET(list.arr, i, { list.arr[i+1] }),
      INC(i)
   )
   DEC(list.count)
end

@ return index of item in list or none it there is no one
def index_of_item_list(list, item)
   FOR
   (
      AS_LOC(i, 0),
      { i < list.count },
      IF
      (
         { item == list.arr[i] },
         RET(i)
      ),
      INC(i)
   )
   RET(none)
end

@ return element at index from list
def get_item_from_list(list, index)
   @ sprawdzamy czy index zawiera się w granicach
   IF
   (
      { index < 0 || index > list.count },
      RET(CR_ERR("Index out of bounds", none, none))
   )
   RET({ list.arr[index] })
end

def size_of_list(list)
   RET(list.count)
end

@ zwraca nową tablicę z elementami skopiowanymi z listy
def get_array_list(list)
   RET(SLICE(list.arr, 0, list.count))
end

@ wyświetla listę na ekran
def print_list(list)
   PRINT("<[")
   FOR
   (
      AS_LOC(i, 0),
      { i < list.count },
      CALL
      (
         PRINT({ list.arr[i] }),
         IF
         (
            { i != list.count - 1 },
            PRINT(", ")
         )
      ),
      INC(i)
   )
   PRINT("]>\n")
end

def _extend_list_if_needed(list)
   AS_LOC(arr_size, SIZE(list.arr))
   @ jeżeli nie ma już miejsca w tablicy
   IF
   (
      { list.count >= arr_size },
      CALL
      (
         @ nowy rozmiar jest dwa razy większy niż obecny
         AS_LOC(new_size, MUL(arr_size, 2)),
         @ rozszerzamy listę
         AS_LOC(list.arr, EXT_ARR(list.arr, new_size))
      )
   )
end

