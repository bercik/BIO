% creates list with given capacity
% returns error if capacity is less than zero
def CREATE_LIST(capacity=10)
   IF(LS(capacity, 0), RET(CR_ERR("Capacity less than zero!", none, none)))
   AS_LOC(list.count, 0, list.arr, CR_ARR(capacity))
   RET(list)
end

% append item to list, extend it if needed
def APPEND_TO_LIST(list, item)
   _EXTEND_LIST_IF_NEEDED(list)
   SET(list.arr, list.count, item)
   INC(list.count)
end

% inserts item into list at index, extend it if needed
% If index is less than zero or greater than count returns error
def INSERT_INTO_LIST(list, index, item)
   _EXTEND_LIST_IF_NEEDED(list)
   % sprawdzamy czy index zawiera się w granicach
   IF
   (
      OR(LS(index, 0), GT(index, list.count)),
      RET(CR_ERR("Index out of bounds", none, none))
   )
   % pętla od count-1 do -1 co -1
   FOR
   (
      AS_LOC(i, SUB(list.count, 1)),
      GE(i, -1),
      % jeżeli i == index-1 to wstaw w miejsce o jeden w prawo item i zatrzymaj
      % inaczej przenieś element z arr[i] do arr[i+1]
      IF
      (
         EQ(i, SUB(index, 1)),
         CALL
         (
            SET(list.arr, ADD(i, 1), item),
            BREAK()
         ),
         SET(list.arr, ADD(i, 1), GET(list.arr, i))
      ),
      DEC(i)
   )
   INC(list.count)
end

% Remove item at index from list. Returns none
% If index is less than zero or greater or equals than count returns error
def REMOVE_FROM_LIST(list, index)
   % sprawdzamy czy index zawiera się w granicach
   IF
   (
      OR(LS(index, 0), GE(index, list.count)),
      RET(CR_ERR("Index out of bounds", none, none))
   )
   % iterujemy od index do count-2 co +1
   % przesuwając element z arr[i+1] do arr[i]
   FOR
   (
      AS_LOC(i, index),
      LS(i, SUB(list.count, 1)),
      SET(list.arr, i, GET(list.arr, ADD(i, 1))),
      INC(i)
   )
   DEC(list.count)
end

% return index of item in list or none it there is no one
def INDEX_OF_ITEM_LIST(list, item)
   FOR
   (
      AS_LOC(i, 0),
      LS(i, list.count),
      IF
      (
         EQ(item, GET(list.arr, i)),
         RET(i)
      ),
      INC(i)
   )
   RET(none)
end

% return element at index from list
def GET_ITEM_FROM_LIST(list, index)
   % sprawdzamy czy index zawiera się w granicach
   IF
   (
      OR(LS(index, 0), GT(index, list.count)),
      RET(CR_ERR("Index out of bounds", none, none))
   )
   RET(GET(list.arr, index))
end

def SIZE_OF_LIST(list)
   RET(list.count)
end

def GET_ARRAY_LIST(list)
   RET(SLICE(list.arr, 0, list.count))
end

def PRINT_LIST(list)
   PRINT("<[")
   FOR
   (
      AS_LOC(i, 0),
      LS(i, list.count),
      CALL
      (
         PRINT(GET(list.arr, i)),
         IF
         (
            NEQ(i, SUB(list.count, 1)),
            PRINT(", ")
         )
      ),
      INC(i)
   )
   PRINT("]>\n")
end

def _EXTEND_LIST_IF_NEEDED(list)
   AS_LOC(arr_size, SIZE(list.arr))
   % jeżeli nie ma już miejsca w tablicy
   IF
   (
      GE(list.count, arr_size), 
      CALL
      (
         % nowy rozmiar jest dwa razy większy niż obecny
         AS_LOC(new_size, MUL(arr_size, 2)),
         % rozszerzamy listę
         AS_LOC(list.arr, EXT_ARR(list.arr, new_size))
      )
   )
end

