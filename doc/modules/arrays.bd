!name CREATE_ARRAY
!alias CR_ARR
!desc Creates array of size <i>size</i> filled with none elements
!param size (int) size of array
!return (array) array with none elements
!error (BAD_PARAMETER_TYPE) if passed parameter is not int
!error (SIZE_LESS_THAN_ZERO) if passed size is less than zero

!name CREATE_DICT
!alias CR_DICT
!desc Creates dict with string keys and any values. Initialize it with given <i>key</i> and <i>value</i> (can be repeated)
!repeat key (string) 
!repeat value (all) 
!return (dict) 
!error (BAD_PARAMETER_TYPE) if <i>key</i> is not string

!name CREATE_TUPLE
!alias CR_TUP
!desc Creates tuple of given elements <i>el</i>
!repeat el (all) element to be inserted in tuple
!return (tuple) tuple of given elements

!name CREATE_TUPLE_OF_ELEMENTS
!alias CR_TUP_OF_EL
!desc Creates tuple of size <i>size</i> filled with elements <i>el</i>
!param size (int) size of tuple
!param el (all) element that will be filled in tuple
!return (tuple) tuple with given elements
!error (BAD_PARAMETER_TYPE) if <i>size</i> isn't int
!error (SIZE_LESS_THAN_ZERO) if <i>size</i> is int but less than zero

!name SET
!desc Sets element at given index in array or at given key for dict. If there was value for given key in dict it will be replaced
!param a (array, dict) 
!param b (int, string) index for array, key for dict
!param c (all) value to be set
!return (all) value given as parameter c
!error (BAD_PARAMETER_TYPE) if <i>a</i> is not array or dict or if <i>b</i> is not int if <i>a</i> is array or string if <i>a</i> is dict
!error (INDEX_OUT_OF_BOUNDS) if given index is greater or equal array size

!name GET
!desc Gets element at given index from array or tuple or at given key from dict
!param a (array, tuple, dict) container from which we want to get element
!param b (int, string) index for collection, key for dict
!return (all) returns element from <i>a</i> at given index or key
!error (BAD_PARAMETER_TYPE) if <i>a</i> is not array, tuple or dict or or if <i>b</i> is not int if <i>a</i> is collection or string if <i>a</i> is dict
!error (INDEX_OUT_OF_BOUNDS) if given index is greater or equal collection size
!error (KEY_DOESNT_EXIST) if given key doesn't exist in dict

!name SIZE
!desc Returns size of given collection or dict
!param a (array, tuple, dict) 
!return (int) size of given collection or dict
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not array tuple or dict

!name RANGE
!desc Returns all natural numbers in range of &lt;<i>min</i>, <i>max</i>&gt;
!param min (int) lowerbound
!param max (int) upperbound
!return (array) array that contains all natural numbers in given range
!error (BAD_PARAMETER_TYPE) if <i>min</i> or <i>max</i> aren't int
!error (MIN_GREATER_THAN_MAX) if min is greater than max

!name COPY
!desc Copy elements from given array or dict to new one. <b>Note:</b> It won't copy arrays and dicts recursively. To do this use DEEP_COPY instead
!param a (array, dict) array or dict to be copy
!return (array, dict) new array or dict
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not array or dict

!name DEEP_COPY
!desc Copy elements from given array, tuple or dict to new one. <b>Note:</b> It will copy arrays, tuples and dicts recursively. If you don't want this behavior use COPY instead
!param a (array, tuple, dict) array, tuple or dict to be copy
!return (array, tuple, dict) new array, tuple or dict
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not array, tuple or dict

!name SLICE
!desc Returns new array or tuple with copied objects from given <i>col</i> range &lt;<i>start</i>, <i>end</i>)
!param col (array, tuple) collection to be sliced 
!param start (int) start index of slice
!param end (int) end index of slice 
!return (array, tuple) Returns new array if you pass array or new tuple if you pass tuple
!error (BAD_PARAMETER_TYPE) If <i>col</i> is not array or tuple or if <i>start</i> or <i>end</i> are not int
!error (START_GREATER_THAN_END) If <i>start</i> is greater than <i>end</i>
!error (INDEX_OUT_OF_BOUNDS) If <i>start</i> or <i>end</i> are out of <i>col</i> bounds

!name EXTEND_ARRAY
!alias EXT_ARR
!desc Extends array to given size or if size is less than actual cut it. Fills elements above size with nones. <b>Note:</b> it will return extended array as new array, not affecting given one
!param arr (array) array to be extended
!param size (int) new size
!return (array) new extended array
!error (BAD_PARAMETER_TYPE) If <i>arr</i> is not array or <i>size</i> is not int
!error (SIZE_LESS_THAN_ZERO) If <i>size</i> is less than zero

!name UNPACK
!desc Unpacks collection to given variables. If size of collection is greater than number of variables it will assign all unassigned values as a tuple to the last variable. If number of variables is greater than size of collection than error would be returned. If error occurs during execution of this function than no variable would be affected by it
!param id (id) 
!repeat id (id) 
!param col (array, tuple) 
!return (array, tuple) given collection
!error (BAD_PARAMETER_TYPE) If <i>col</i> is not array or tuple
!error (NUMBER_OF_VARIABLES_GREATER_THAN_COLLECTION_SIZE) If number of variables is greater than collection size

!name CONTAINS
!desc Checks whether collection <i>col</i> contains element <i>el</i>. Uses EQ function to achive that
!param col (array, tuple) 
!param el (all except error) 
!return (bool) true if collection contains element, otherwise false
!error (BAD_PARAMETER_TYPE) If one of element in <i>col</i> is error or <i>el</i> is error

!name CONTAINS_KEY
!desc Checks whether dict <i>dict</i> contains key <i>key</i>
!param dict (dict) 
!param key (string) 
!return (bool) true if dict <i>dict</i> contains key <i>key</i>, otherwise false
!error (BAD_PARAMETER_TYPE) If <i>dict</i> is not dict or <i>key</i> is not string

!name CONTAINS_VALUE
!alias CONTAINS_VAL
!desc Checks whether dict <i>dict</i> contains value <i>val</i>. Uses EQ function to achive that
!param dict (dict) 
!param val (all except error) 
!return (bool) true if dict <i>dict</i> contains value <i>val</i>, otherwise false
!error (BAD_PARAMETER_TYPE) If <i>dict</i> is not dict, if one of element in <i>dict</i> is error or <i>val</i> is error

!name GET_KEYS
!desc Returns tuple with <i>dict</i> keys
!param dict (dict) 
!return (tuple) tuple with <i>dict</i> keys
!error (BAD_PARAMETER_TYPE) If <i>dict</i> is not dict

!name REMOVE_KEY
!desc Removes <i>key</i> from <i>dict</i>
!param dict (dict) 
!param key (string) 
!return (all) Value at key <i>key</i>
!error (BAD_PARAMETER_TYPE) If <i>dict</i> is not dict or <i>key</i> is not string
!error (KEY_DOESNT_EXIST) If <i>key</i> doesn't exist in <i>dict</i>

!name COUNT_ELEMENTS
!alias COUNT_EL
!desc Count occurences of element <i>el</i> in collection or dict <i>a</i>. Uses EQ function to achive that
!param a (array, tuple, dict) 
!param el (all except error) 
!return (int) number of occurence of element <i>el</i> in collection or dict <i>a</i>
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not collection or dict or one of their element is error or <i>el</i> is error

!name SORT_ASC
!desc Sorts given collection in ascending order. Collection have to have only strings or numbers to be sorted. Strings are sorted alphabetically. In case of numbers their types remains the same. Returns sorted collection as new array
!param col (array, tuple) collection to be sorted
!return (array) sorted collection as new array
!error (BAD_PARAMETER_TYPE) if <i>col</i> is not collection, contains other elements than strings or numbers or there are mixed strings and numbers

!name SORT_DESC
!desc Sorts given collection in descending order. Collection have to have only strings or numbers to be sorted. Strings are sorted alphabetically. In case of numbers their types remains the same. Returns sorted collection as new array
!param col (array, tuple) collection to be sorted
!return (array) sorted collection as new array
!error (BAD_PARAMETER_TYPE) if <i>col</i> is not collection, contains other elements than strings or numbers or there are mixed strings and numbers

