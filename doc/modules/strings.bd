!name SUBSTR
!desc Returns a new string that is a substring of <i>str</i> in range &lt;<i>start</i>, <i>end</i>)
!param str (string) 
!param start (int) 
!param end (int) 
!return (string) 
!error (BAD_PARAMETER_TYPE) If <i>str</i> is not string or <i>start</i> or <i>end</i> is not int
!error (START_GREATER_THAN_END) If <i>start</i> is greater than <i>end</i>
!error (INDEX_OUT_OF_BOUNDS) If <i>start</i> is less than zero or <i>end</i> is greater or equals <i>str</i> length

!name LENGTH
!desc Returns length of string <i>a</i> or if you pass collection returns length of every string in it as new array
!param a (string, array, tuple) 
!return (int, array) if you pass string it would return int, if you pass collection it would return array of ints
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not string, array or tuple or if collection contains not only strings

!name TO_LOWERCASE
!desc Converts all of the characters in string <i>a</i> to lower case and returns as new string. If you pass collection than it would convert all strings in it to lower case and returns as new array
!param a (string, array, tuple) 
!return (string, array) if you pass string returns string, if you pass array or tuple returns array 
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not string, array or tuple or collection contains not only strings

!name TO_UPPERCASE
!desc Converts all of the characters in string <i>a</i> to upper case and returns as new string. If you pass collection than it would convert all strings in it to upper case and returns as new array
!param a (string, array, tuple) 
!return (string, array) if you pass string returns string, if you pass array or tuple returns array 
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not string, array or tuple or collection contains not only strings

!name INSERT
!desc Inserts <i>to_insert</i> string into <i>str</i> at position <i>index</i> and returns as new string
!param str (string) 
!param index (int) 
!param to_insert (string) 
!return (string) 
!error (BAD_PARAMETER_TYPE) If <i>to_insert</i> or <i>str</i> is not string or <i>index</i> is not int
!error (INDEX_OUT_OF_BOUNDS) If <i>index</i> is out of bounds <i>str</i>

!name STARTS_WITH
!desc Tests if <i>str</i> starts with the specified <i>prefix</i>
!param str (string) 
!param prefix (string) 
!return (bool) True if <i>str</i> starts with <i>prefix</i>, otherwise false
!error (BAD_PARAMETER_TYPE) If <i>str</i> or <i>prefix</i> is not string

!name ENDS_WITH
!desc Tests if <i>str</i> ends with the specified <i>sufix</i>
!param str (string) 
!param sufix (string) 
!return (bool) True if <i>str</i> ends with <i>prefix</i>, otherwise false
!error (BAD_PARAMETER_TYPE) If <i>str</i> or <i>sufix</i> is not string

!name REPLACE
!desc If <i>b</i> is string than replaces each substring of <i>str</i> that matches the given regular expression with the given <i>replacement</i>. Because this function internally uses java String.replaceAll function, check <a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#sum">java doc</a> for informations about creating regular expressions. If <i>b</i> is int than replaces characters in <i>str</i> starting from position <i>b</i> by <i>replacement</i> string. If necessary resulting string can be longer than original <i>str</i>
!param str (string) original string
!param b (string, int) regular expression or index
!param replacement (string) replacement string
!return (string) new string
!error (BAD_PARAMETER_TYPE) If <i>str</i> or <i>replacement</i> is not string or <i>b</i> is not int or string
!error (INDEX_OUT_OF_BOUNDS) If <i>b</i> is int and it is less than zero or greater than <i>str</i> length
!error (REGEX_ERROR) If <i>b</i> is string and it is invalid regular expression

!name INDEX_OF
!desc Returns the index within <i>str</i> of the first occurrence of the specified <i>substr</i>
!param str (string) 
!param substr (string) 
!return (int) the index of the first occurrence of the specified <i>substr</i>, or -1 if there is no such occurrence
!error (BAD_PARAMETER_TYPE) If <i>str</i> or <i>substr</i> is not string 

!name LAST_INDEX_OF
!desc Returns the index within <i>str</i> of the last occurrence of the specified <i>substr</i>
!param str (string) 
!param substr (string) 
!return (int) the index of the last occurrence of the specified <i>substr</i>, or -1 if there is no such occurrence
!error (BAD_PARAMETER_TYPE) If <i>str</i> or <i>substr</i> is not string 

!name SPLIT
!desc Splits <i>str</i> around matches of the given regular expression <i>regex</i>. Because this function internally uses java String.split function, check <a href="https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html#sum">java doc</a> for informations about creating regular expressions. Resulted strings does not include matched delimiter
!param str (string) 
!param regex (string) 
!return (array) the array of strings computed by splitting this string around matches of the given regular expression
!error (BAD_PARAMETER_TYPE) If <i>str</i> or <i>regex</i> is not string
!error (REGEX_ERROR) If <i>regex</i> is invalid regular expression

!name TRIM
!desc Returns a copy of the string, with leading and trailing whitespace omitted. If you pass collection it would trim all strings in it and returns as new array
!param a (string, array, tuple) 
!return (string, array) If you pass string, result would be string. If you pass collection result would be array
!error (BAD_PARAMETER_TYPE) If <i>a</i> is not string, array or tuple or if collection contains not only strings

