!name PRINT_STACK_TRACE
!desc Prints <i>err</i> first cause stack trace (or if there isn't any cause, this error stack trace)
!param err (error) 
!return (string) printed string
!error (BAD_PARAMETER_TYPE) if <i>err</i> isn't error

!name PRINT_LAST_NTH_STACK_TRACE
!desc Prints <i>err</i> first cause <i>n</i>th last stack trace (or if there isn't any cause, this error last stack trace)
!param err (error) 
!param n (int) which trace to print, zero means last, one means one before last etc.
!return (string) printed string
!error (BAD_PARAMETER_TYPE) If <i>err</i> isn't error or <i>n</i> is not int
!error (NO_STACK_TRACE) If there is no <i>n</i>th last stack trace

!name CREATE_ERROR
!alias CR_ERR
!desc Creates error with string <i>msg</i>, any additional value (except error) <i>obj</i> and error <i>cause</i>
!param msg (string) error message
!param obj (all except error) any additional value
!param cause (error, none) error which caused this or none if there isn't one
!return (error) new error
!error (BAD_PARAMETER_TYPE) If <i>msg</i> is not string, <i>obj</i> is error or <i>cause</i> is not error or none

!name GET_ERROR_MESSAGE
!alias GET_ERR_MSG
!desc Returns error message
!param err (error) 
!return (string) 
!error (BAD_PARAMETER_TYPE) If <i>err</i> is not error

!name GET_ERROR_OBJECT
!alias GET_ERR_OBJ
!desc Returns error additional object
!param err (error) 
!return (all except error) 
!error (BAD_PARAMETER_TYPE) If <i>err</i> is not error

!name GET_ERROR_CAUSE
!alias GET_ERR_CAUSE
!desc Returns error cause
!param err (error) 
!return (error, none) error if there is cause, otherwise none
!error (BAD_PARAMETER_TYPE) If <i>err</i> is not error

!name GET_ERROR_LINE
!alias GET_ERR_LINE
!desc Returns error occurence line
!param err (error) 
!return (int) 
!error (BAD_PARAMETER_TYPE) If <i>err</i> is not error

!name GET_ERROR_CH
!alias GET_ERR_CH
!desc Returns error occurence character
!param err (error) 
!return (int) 
!error (BAD_PARAMETER_TYPE) If <i>err</i> is not error

!name ASSERTS_ON
!desc Turns on assertions checking in your program. By default assertions checking is turned on.
!return (none) 

!name ASSERTS_OFF
!desc Turns off assertions checking in your program. By default assertions checking is turned on.
!return (none) 

!name ASSERT_TRUE
!desc Inserts debugging assertion into a program. If assertions checking is turn on checks if given bool <i>val</i> is true, if not prints message and exits program.
!param val (bool) 
!return (none) 
!error (BAD_PARAMETER_TYPE) If <i>val</i> is not bool

!name ASSERT_FALSE
!desc Inserts debugging assertion into a program. If assertions checking is turn on checks if given bool <i>val</i> is false, if not prints message and exits program.
!param val (bool) 
!return (none) 
!error (BAD_PARAMETER_TYPE) If <i>val</i> is not bool

!name ASSERT_EQ
!desc Inserts debugging assertion into a program. If assertions checking is turn on checks if given value <i>expected</i> is equals to <i>actual</i> using EQ function. If not prints message and exits program. <b>Note:</b> You can't assert that two errors are equals using this function. To compare two errors compare one of their field like message or object.
!param expected (all except error) 
!param actual (all except error) 
!return (none) 
!error (BAD_PARAMETER_TYPE) If <i>expected</i> or <i>actual</i> is error

!name ASSERT_NEQ
!desc Inserts debugging assertion into a program. If assertions checking is turn on checks if given value <i>expected</i> is not equals to <i>actual</i> using NEQ function. If not prints message and exits program. <b>Note:</b> You can't assert that two errors aren't equals using this function. To compare two errors compare one of their field like message or object.
!param expected (all except error) 
!param actual (all except error) 
!return (none) 
!error (BAD_PARAMETER_TYPE) If <i>expected</i> or <i>actual</i> is error

!name ASSIGN_LOCAL_RETURN_IF_ERROR
!alias AS_LOC_RET_IF_ERR
!desc Assigns value <i>val</i> to local variable with identifier <i>id</i>. If <i>val</i> is error than call RETURN function with it as parameter.
!param identifier (id) 
!param val (all) 
!repeat identifier (id) 
!repeat val (all) 
!return (none) 

